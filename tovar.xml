<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
    <!-- ROLES -->
    <role>
        <id>employee</id>
        <name>zamestnanec</name>
    </role>
    <role>
        <id>customer</id>
        <name>zakaznik</name>
    </role>


    <!-- DATA -->
    <data type="date">
        <id>expirationDate</id>
        <title>Datum expiracie:</title>
    </data>

    <data type="number">
        <id>price</id>
        <title>Cena</title>
    </data>

    <data type="enumeration">
        <id>monthsEnum</id>
        <title>Pocet mesiacov</title>
        <values>1</values>
        <values>2</values>
        <values>3</values>
        <values>4</values>
        <values>5</values>
        <values>6</values>

        <action trigger="set">
            date: f.expirationDate,
            en: f.this,
            price: f.price;

            change date value {
                def d2
                use (groovy.time.TimeCategory) {
                    d2 = new Date() + (en.value.defaultValue as int).months
                }
                return d2
            }

            change price value{
                return 20 * (en.value.defaultValue as int)
            }
        </action>
    </data>

    <data type="date">
        <id>expirationDateExtend</id>
        <title>Predlzit do:</title>
    </data>

    <data type="enumeration">
        <id>monthsEnumExtend</id>
        <title>Pocet mesiacov</title>
        <values>1</values>
        <values>2</values>
        <values>3</values>
        <values>4</values>
        <values>5</values>
        <values>6</values>

        <action trigger="set">
            date: f.expirationDateExtend,
            en: f.this,
            actualExpiration: f.expirationDate,
            price: f.price;

            change date value {
            def d2
            use (groovy.time.TimeCategory) {

            d2 = Date.from(actualExpiration.value.atStartOfDay(java.time.ZoneId.systemDefault()).toInstant())  + (en.value.defaultValue as int).months

            }
            return d2
            }

            change price value{
            return 20 * (en.value.defaultValue as int)
            }
        </action>
    </data>

    <data type="text">
        <id>goodsId</id>
        <title>Id tovaru</title>
    </data>
    <data type="text">
        <id>goodsName</id>
        <title>Nazov tovaru</title>
    </data>
    <data type="text">
        <id>goodsOwner</id>
        <title>Majitel</title>
    </data>
    <data type="date">
    <id>goodsExpiration</id>
    <title>Datum expiracie</title>
    </data>

    <data type="text">
        <id>sectorId</id>
        <title>Id sektoru</title>
    </data>
    <data type="text">
        <id>sectorTitle</id>
        <title>Ulozene v sektore</title>
    </data>

    <data type="text">
        <id>stockTitle</id>
        <title>Ulozene v sklade</title>
    </data>

    <data type="enumeration">
        <id>platba</id>
        <title>Platba</title>
        <values>platba kartou</values>
        <values>paypall</values>
        <init>Moznost platby</init>
    </data>

    <!-- paypall -->
    <data type="text">
        <id>login</id>
        <title>Login</title>
    </data>

    <data type="text">
        <id>heslo</id>
        <title>Heslo</title>
    </data>

    <!-- karta -->
    <data type="text">
        <id>idPlatitel</id>
        <title>Meno platitela</title>
    </data>

    <data type="text">
        <id>cisloKarty</id>
        <title>Cislo karty</title>
    </data>

    <data type="text">
        <id>validacneCislo</id>
        <title>Validacne Cislo</title>
    </data>

    <data type="text">
        <id>expiracia</id>
        <title>Expiracia</title>
    </data>
	<!-- TRANSITIONS -->
	<transition>
		<id>3</id>
		<x>900</x>
		<y>220</y>
		<label>Prevziat tovar[C]</label>
        <roleRef>
            <id>customer</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <event type="finish">
            <id>1</id>
            <actions phase="pre">
                <action>
                    goodsName: f.goodsName,
                    sectorId: f.sectorId,
                    sectorTitle: f.sectorTitle;

                    def task = findTask({it.transitionId.eq("9").and(it.caseId.eq(sectorId.value as String))})
                    taskService.assignTask(task.stringId)

                    setData(task,[
                    "goodsName": [
                    "value": goodsName.value,
                    "type": "text"
                    ]
                    ])

                    taskService.finishTask(task.stringId)

                </action>
            </actions>
        </event>
	</transition>
	<transition>
		<id>4</id>
		<x>580</x>
		<y>300</y>
		<label>Predlzit uskladnenie[C]</label>
        <roleRef>
            <id>customer</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <dataRef>
            <id>monthsEnumExtend</id>
            <logic>
                <behavior>editable</behavior>
                <behavior>required</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>expirationDate</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>expirationDateExtend</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>price</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>platba</id>
            <logic>
                <behavior>editable</behavior>
                <action trigger="set">
                    login: f.login,
                    heslo: f.heslo,
                    menoPlatitela: f.idPlatitel,
                    validacneCislo: f.validacneCislo,
                    expiracia: f.expiracia,
                    cisloKarty: f.cisloKarty,
                    platba: f.this,
                    trans: t.this;

                    make login,hidden on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make heslo,hidden on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }


                    make cisloKarty,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make menoPlatitela,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make validacneCislo,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make expiracia,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }


                    make login,editable on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make heslo,editable on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }


                    make cisloKarty,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make menoPlatitela,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make validacneCislo,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make expiracia,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                </action>
            </logic>
        </dataRef>
        <dataRef>
            <id>login</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>heslo</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>idPlatitel</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>cisloKarty</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>expiracia</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>validacneCislo</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <event type="finish">
            <id>1</id>
            <actions phase="pre">
                <action trigger="set">
                    newExpiration: f.expirationDateExtend,
                    actualExpiration: f.expirationDate;

                    change actualExpiration value{
                        return newExpiration.value
                    }
                </action>
            </actions>
        </event>


	</transition>
	<transition>
		<id>8</id>
		<x>460</x>
		<y>220</y>
		<label>Zaplatit[C]</label>
        <roleRef>
            <id>customer</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <dataRef>
            <id>monthsEnum</id>
            <logic>
                <behavior>editable</behavior>
                <behavior>required</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>expirationDate</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>price</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>platba</id>
            <logic>
                <behavior>editable</behavior>
                <action trigger="set">
                    login: f.login,
                    heslo: f.heslo,
                    menoPlatitela: f.idPlatitel,
                    validacneCislo: f.validacneCislo,
                    expiracia: f.expiracia,
                    cisloKarty: f.cisloKarty,
                    platba: f.this,
                    trans: t.this;

                    make login,hidden on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make heslo,hidden on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }


                    make cisloKarty,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make menoPlatitela,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make validacneCislo,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }
                    make expiracia,editable on trans when {
                    return (platba.value.defaultValue as String) == "platba kartou";
                    }


                    make login,editable on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make heslo,editable on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }


                    make cisloKarty,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make menoPlatitela,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make validacneCislo,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                    make expiracia,hidden on trans when {
                    return (platba.value.defaultValue as String) == "paypall";
                    }
                </action>
            </logic>
        </dataRef>
        <dataRef>
            <id>login</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>heslo</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>idPlatitel</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>cisloKarty</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>expiracia</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>validacneCislo</id>
            <logic>
                <behavior>hidden</behavior>
            </logic>
        </dataRef>
	</transition>
	<transition>
		<id>9</id>
		<x>700</x>
		<y>300</y>
		<label>Kontrola[E]</label>
        <roleRef>
            <id>employee</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
	</transition>
	<transition>
		<id>10</id>
		<x>700</x>
		<y>140</y>
		<label>Info[C]</label>
        <roleRef>
            <id>customer</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <dataRef>
            <id>stockTitle</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>sectorTitle</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>goodsName</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>goodsOwner</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>expirationDate</id>
            <logic>
                <behavior>visible</behavior>
            </logic>
        </dataRef>
	</transition>
	<transition>
		<id>13</id>
		<x>380</x>
		<y>460</y>
		<label>Zrusit[C]</label>
        <roleRef>
            <id>customer</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <event type="finish">
            <id>1</id>
            <actions phase="pre">
                <action>
                    goodsName: f.goodsName,
                    sectorId: f.sectorId,
                    sectorTitle: f.sectorTitle;

                    def task = findTask({it.transitionId.eq("9").and(it.caseId.eq(sectorId.value as String))})
                    taskService.assignTask(task.stringId)

                    setData(task,[
                        "goodsName": [
                        "value": goodsName.value,
                        "type": "text"
                        ]
                    ])

                    taskService.finishTask(task.stringId)

                </action>
            </actions>
        </event>
	</transition>
	<transition>
		<id>16</id>
		<x>620</x>
		<y>220</y>
		<label>Uskladnenie tovaru[E]</label>
        <roleRef>
            <id>employee</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
	</transition>
	<transition>
		<id>27</id>
		<x>780</x>
		<y>380</y>
		<label>Poslat upomienku[E]</label>
        <roleRef>
            <id>employee</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
	</transition>
	<transition>
		<id>28</id>
		<x>940</x>
		<y>300</y>
		<label>Odstranenie tovaru[E]</label>
        <roleRef>
            <id>employee</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <event type="finish">
            <id>1</id>
            <actions phase="pre">
                <action>
                    goodsName: f.goodsName,
                    sectorId: f.sectorId,
                    sectorTitle: f.sectorTitle;

                    def task = findTask({it.transitionId.eq("9").and(it.caseId.eq(sectorId.value as String))})
                    taskService.assignTask(task.stringId)

                    setData(task,[
                    "goodsName": [
                    "value": goodsName.value,
                    "type": "text"
                    ]
                    ])

                    taskService.finishTask(task.stringId)

                </action>
            </actions>
        </event>
	</transition>
	<transition>
		<id>29</id>
		<x>900</x>
		<y>380</y>
		<label>Ukoncit kontrolu[E]</label>
        <roleRef>
            <id>employee</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
	</transition>
	<transition>
		<id>46</id>
		<x>220</x>
		<y>220</y>
		<label>Vytvor tovar</label>
        <roleRef>
            <id>employee</id>
            <logic>
                <perform>true</perform>
            </logic>
        </roleRef>
        <dataRef>
            <id>goodsId</id>
            <logic>
                <behavior>required</behavior>
                <behavior>editable</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>goodsName</id>
            <logic>
                <behavior>required</behavior>
                <behavior>editable</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>goodsOwner</id>
            <logic>
                <behavior>required</behavior>
                <behavior>editable</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>sectorId</id>
            <logic>
                <behavior>required</behavior>
                <behavior>editable</behavior>
            </logic>
        </dataRef>
        <dataRef>
            <id>sectorTitle</id>
            <logic>
                <behavior>required</behavior>
                <behavior>editable</behavior>
            </logic>
        </dataRef>
	</transition>


	<!-- PLACES -->
	<place>
		<id>5</id>
		<x>380</x>
		<y>220</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>15</id>
		<x>540</x>
		<y>220</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>19</id>
		<x>700</x>
		<y>220</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>22</id>
		<x>820</x>
		<y>300</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>33</id>
		<x>1340</x>
		<y>460</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>41</id>
		<x>620</x>
		<y>380</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>48</id>
		<x>100</x>
		<y>220</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>


	<!-- ARCS -->
	<arc>
		<id>12</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>14</id>
		<type>regular</type>
		<sourceId>5</sourceId>
		<destinationId>13</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>17</id>
		<type>regular</type>
		<sourceId>8</sourceId>
		<destinationId>15</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>18</id>
		<type>regular</type>
		<sourceId>15</sourceId>
		<destinationId>16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>20</id>
		<type>regular</type>
		<sourceId>16</sourceId>
		<destinationId>19</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>21</id>
		<type>read</type>
		<sourceId>19</sourceId>
		<destinationId>10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>23</id>
		<type>regular</type>
		<sourceId>19</sourceId>
		<destinationId>3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>25</id>
		<type>read</type>
		<sourceId>19</sourceId>
		<destinationId>9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>26</id>
		<type>regular</type>
		<sourceId>9</sourceId>
		<destinationId>22</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>740</x><y>300</y></breakPoint>
	</arc>
	<arc>
		<id>30</id>
		<type>regular</type>
		<sourceId>22</sourceId>
		<destinationId>27</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>31</id>
		<type>regular</type>
		<sourceId>22</sourceId>
		<destinationId>28</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>32</id>
		<type>regular</type>
		<sourceId>22</sourceId>
		<destinationId>29</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>34</id>
		<type>regular</type>
		<sourceId>19</sourceId>
		<destinationId>28</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>35</id>
		<type>regular</type>
		<sourceId>28</sourceId>
		<destinationId>33</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>36</id>
		<type>regular</type>
		<sourceId>3</sourceId>
		<destinationId>33</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>39</id>
		<type>read</type>
		<sourceId>19</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>40</id>
		<type>regular</type>
		<sourceId>13</sourceId>
		<destinationId>33</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>42</id>
		<type>regular</type>
		<sourceId>41</sourceId>
		<destinationId>27</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>43</id>
		<type>reset</type>
		<sourceId>41</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>620</x><y>340</y></breakPoint>
	</arc>
	<arc>
		<id>44</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>41</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>580</x><y>380</y></breakPoint>
	</arc>
	<arc>
		<id>45</id>
		<type>reset</type>
		<sourceId>22</sourceId>
		<destinationId>9</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>740</x><y>300</y></breakPoint>
	</arc>
	<arc>
		<id>49</id>
		<type>regular</type>
		<sourceId>48</sourceId>
		<destinationId>46</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>51</id>
		<type>regular</type>
		<sourceId>46</sourceId>
		<destinationId>5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>